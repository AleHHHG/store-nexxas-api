swagger: "2.0"
info:
  version: "1.0.0"
  title: "Swagger Store API"
host: "store-nexaas-api.herokuapp.com"
schemes:
- "https"
- "http"
paths:
  /products:
    get:
      tags:
      - "product"
      summary: "Add a new product"
      operationId: "getProducts"
      parameters:
      - name: "page"
        in: "query"
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Product'
    post:
      tags:
      - "product"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addProduct"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Invalid Body"
          schema:
            $ref: "#/definitions/Errors"
  /products/{product_id}:
    get:
      tags:
      - "product"
      summary: "Find product by ID"
      description: "Returns a single Product"
      operationId: "getProductById"
      parameters:
      - name: "product_id"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Message"
    put:
      tags:
      - "product"
      summary: "Update product"
      description: ""
      operationId: "updateProduct"
      parameters:
      - name: "product_id"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Message"
    delete:
      tags:
      - "product"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteProduct"
      parameters:
      - name: "product_id"
        in: "path"
        description: "Product id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Resource deleted with success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Message"
  /stores:
    get:
      tags:
      - "store"
      summary: "Add a new stroe"
      operationId: "getStore"
      parameters:
      - name: "page"
        in: "query"
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Store'
    post:
      tags:
      - "store"
      summary: "Add a new store"
      description: ""
      operationId: "addStore"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Store"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        400:
          description: "Invalid Body"
          schema:
            $ref: "#/definitions/Errors"
  /stores/{store_id}:
    get:
      tags:
      - "store"
      summary: "Find store by ID"
      description: "Returns a single store"
      operationId: "getStoreById"
      parameters:
      - name: "store_id"
        in: "path"
        description: "ID of stroe to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Message"
    put:
      tags:
      - "store"
      summary: "Update store"
      description: "Update store"
      operationId: "updateStore"
      parameters:
      - name: "store_id"
        in: "path"
        description: "ID of stroe to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Message"
    delete:
      tags:
      - "store"
      summary: "Deletes a store"
      description: ""
      operationId: "deleteStore"
      parameters:
      - name: "store_id"
        in: "path"
        description: "Store id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Resource deleted with success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Message"
  /stock_items:
    post:
      tags:
      - "stock_item"
      summary: "Add a new Stock to Store"
      description: ""
      operationId: "addStockItem"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/StockItem"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        400:
          description: "Invalid Body"
          schema:
            $ref: "#/definitions/Errors"
  /stock_items/add:
    put:
      tags:
      - "stock_item"
      summary: "Add qtd to stock"
      description: "Add stock to product"
      operationId: "addStockItemToProduct"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/StockItemUpdate"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StockItem"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Message"
        400:
          description: "Invalid Body"
          schema:
            $ref: "#/definitions/Errors"
  /stock_items/sub:
    put:
      tags:
      - "stock_item"
      summary: "Sub qtd to stock"
      description: "Sub stock to product"
      operationId: "subStockItemToProduct"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/StockItemUpdate"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StockItem"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Message"
        400:
          description: "Invalid Body"
          schema:
            $ref: "#/definitions/Errors"
definitions:
  Product:
    type: "object"
    required:
    - "name"
    - "price"
    - "cost_price"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      price:
        type: "number"
      cost_price:
        type: "number"
  Store:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      logo:
        type: "string"
      addrres:
        $ref: "#/definitions/Address"
  Address:
    type: "object"
    required:
    - "name"
    - "price"
    - "cost_price"
    properties:
      id:
        type: "integer"
        format: "int64"
      zipcode:
        type: "string"
      street:
        type: "string"
      number:
        type: "number"
      complement:
        type: "string"
      neighborhood:
        type: "string"
      city:
        type: "string"
      state:
        type: "string"
  StockItem:
    type: "object"
    required:
    - "product_id"
    - "store_id"
    - "stock"
    properties:
      id:
        type: "integer"
        format: "int64"
      product_id:
        type: "integer"
        format: "int64"
      store_id:
        type: "integer"
        format: "int64"
      stock:
        type: "number"
  StockItemUpdate:
    type: "object"
    required:
    - "product_id"
    - "store_id"
    - "qtd"
    properties:
      id:
        type: "integer"
        format: "int64"
      product_id:
        type: "integer"
        format: "int64"
      store_id:
        type: "integer"
        format: "int64"
      qtd:
        type: "number"
  Errors:
    type: "object"
    properties:
      errors:
        type: "object"
  Message:
    type: "object"
    properties:
      message:
        type: "string"